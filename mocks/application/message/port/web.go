// Code generated by MockGen. DO NOT EDIT.
// Source: ./application/message/port/web.go

// Package port is a generated GoMock package.
package port

import (
	domain "gin-gorm-sample/application/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWeb is a mock of Web interface
type MockWeb struct {
	ctrl     *gomock.Controller
	recorder *MockWebMockRecorder
}

// MockWebMockRecorder is the mock recorder for MockWeb
type MockWebMockRecorder struct {
	mock *MockWeb
}

// NewMockWeb creates a new mock instance
func NewMockWeb(ctrl *gomock.Controller) *MockWeb {
	mock := &MockWeb{ctrl: ctrl}
	mock.recorder = &MockWebMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWeb) EXPECT() *MockWebMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockWeb) Get(messageID uint) (domain.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", messageID)
	ret0, _ := ret[0].(domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockWebMockRecorder) Get(messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWeb)(nil).Get), messageID)
}

// GetAll mocks base method
func (m *MockWeb) GetAll(userID uint) ([]domain.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userID)
	ret0, _ := ret[0].([]domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockWebMockRecorder) GetAll(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockWeb)(nil).GetAll), userID)
}

// Create mocks base method
func (m *MockWeb) Create(message *domain.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockWebMockRecorder) Create(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWeb)(nil).Create), message)
}

// Update mocks base method
func (m *MockWeb) Update(message *domain.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockWebMockRecorder) Update(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWeb)(nil).Update), message)
}

// Delete mocks base method
func (m *MockWeb) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockWebMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWeb)(nil).Delete), id)
}
